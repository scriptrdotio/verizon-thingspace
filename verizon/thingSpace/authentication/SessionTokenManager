 /**
 * This module is in charge of obtaining an OAuth 2.0 access token, either from 
 * a provided code or from a provided refresh token, for a given user.
 * The module stores the access and refresh token in the global storage
 * storage.global.[app]_username_accessToken
 * storage.global.[app]_username_refreshToken
 * @module TokenManager
 */

var config = require("verizon/thingSpace/authentication/config");
var http = require("http");


/** 
 * Retrieve the access and refresh tokens of a given user from te global storage
 * This method can throw exceptions
 * @method getPersistedTokens
 * @param {String} username : the name of the user for who we need the corresponding tokens
 * @return {Object} {accessToken, refreshToken, userId}
 */
function getPersistedTokens(username) {
  if(!username){
    username = config.get("username");
  }
  var app = config.get(app)
  var accessToken =storage.global[config.get("app") + "_" + username + "_accessToken"] ;

  if (!accessToken) {
    
    return {
      "errorCode": "Missing_Access_Token",
      "errorDetail": "Could not find an access token or a refresh token for this user " + username
    };
  }
  
  return {
    "accessToken": accessToken,

  };
}



function saveToken(token, username) {
 
  // retrieve the username who owns this token using the persisted state-username mapping
  var username = username ?username: config.get("username");
  if (!username) {

    throw {

      "errorCode": "Inconsistency_Error",
      "errorDetail": "Could not find username " + username + " in store to store the tokens"
    };
  }
  
  
  // save the new tokens
  storage.global[config.get("app") + "_" + username + "_accessToken"] = token;
 
  
  return {
    
    "access_Token": token,

  };
};

/**
 * Invoke app's authorization API to obtain an access token
 * This method can throw exceptions
 * @method getAccessToken
 * @param {Object} params
 *	{String} params.state : the state that was generated by oauth/config when issuing the auth request
 *	{String} params.code : the OAuth code returned by the app further to the auth request, to be exchanged for a
 *  an access token
 * @return {Object} the API response. You do not need it normally. Get the tokens using getPersistedTokens()
 */
function getSessionToken() {
  return this._getToken();
}
function refreshSessionToken(){
  return _getToken();
}

function _getToken() {
var requestSessionUrl = config.getSessionUrl().url;
  var requestSessionToken = http.request({"url":requestSessionUrl,
                     "method":"POST",
                     "headers":{"Authorization":" Bearer "+config.get("accessToken")},
                     "disableParameterEncoding":false,
                     "encodeHeaders":false
                    });
  	if (requestSessionToken.status == "200"){
      	return {"status":"success", "accessToken":JSON.parse(requestSessionToken.body).sessionToken};
	}
  else{
    return refreshSessionToken();
  }

}